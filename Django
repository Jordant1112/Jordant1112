### Building app throught Django

pip install django
python -m django --version  ##check version

django-admin
##get a list of subcommand we will use startproject 
django-admin startproject django_project

cd django_project/    ##open up the project in the editor

tree ##in command terminal to see the structure of the file

## to access our site, go to terminal
python manage.py runserver
## it will give you a local url

## stop running server
ctrl + c


#create blog app in our project
python manage.py startapp blog

tree ## print out project structure

##open views.py
from django.http import HttpResponse

def home(request):
  return HttpResponse('<h1>Blog Home</h1>')
  
def about(request):
  return HttpResponse('<h1>Blog About</h1>')
  

  
## create a urls.py in blog file
from django.urls import path, include
from . import views
urlpatterns = [
  path('', views.home, name = 'blog-home'),   ## homepage for ''
  path('about/', views.about, name = 'blog-about'),
]


### urls.pyin django_project
from django.urls import path, include
urlpatterns = [
  path('admin/', admin.site.urls),
  path('blog/',include('blog.urls')),
]

## First check the url patterns in django_project for either admin/ or blog/, if it matches, pass the about string to blog url, 
## path in about/ in url in blog has views.about and it is shown in about function for '<h1>Blog about<h1>'


## Template
## create a template folder
### blog -> templates -> blog -> template.html
### in the second blog file create home.html, about.html

#type html and tab it will show up the template
<!DOCTYPE html>
<html>
<head>
    <title></title>
</head>
<body>
    <h1> Blog Home! </h1>
</body>
</html>
## in the apps.py, there is a BlogConfig
# Open the settings.py file in the django_project
# add the BlogConfig in

INSTALLED_APPS = [
  'blog.apps.BlogConfig',
  'django.contrib.admin'...
]

## in views.py
from django.shortcuts import render
from django.http import HttpResponse

posts = [
  {
   'author ': 'CoreyMS', 
   'title' : 'Blog Post 1',
   'content' : 'First post content',
   'Date_posted': 'August 27, 2018'
  },
  {
   'author ': 'JD', 
   'title' : 'Blog Post 2',
   'content' : 'Second post content',
   'Date_posted': 'August 28, 2018'
  }
]

def home(request):
  context = {
    'posts': posts
  }
  return render(request, 'blog/home.html', context, {'title': 'about'})  ## pass the data into the template, title can also be passed in 
  
def about(request):
  return render(request, 'blog/about.html')
  
 ## in the home.html now:
<!DOCTYPE html>
<html>
<head>
    {% if title %}
      <title>Django Blog - {{title}} </title>
    {% else %}
      <title>Django Blog </title>
    {% endif %}
</head>
<body>
    #<h1> Blog Home! </h1>
    {% for post in posts %}
        <h1>{{ post.title }}</h1>
        <p>By {{post.author}} on {{ post.date_posted }}</p>  ## paragraph
        <p> {{post.content}} </p>
    {% endfor %}
</body>
</html>

## After the reload, we will see the update for the for loop we wrote
  
# We can also copy the templaate page to about.html
<!DOCTYPE html>
<html>
<head>
    <title></title>
</head>
<body>
    <h1> About Page </h1>
</body>
</html>


## Template inherent
## create base.html in blog, deal with repeated code in template  (serve as parent page or base structure of our webpages)
<!DOCTYPE html>
<html>
<head>
    {% if title %}
      <title>Django Blog - {{title}} </title>
    {% else %}
      <title>Django Blog </title>
    {% endif %}
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>

###then in home.html we can leave the unique session 

{% extends 'blog/base.html' %}
{% block content %}
    {% for post in posts %}
        <h1>{{ post.title }}</h1>
        <p>By {{post.author}} on {{ post.date_posted }}</p>  ## paragraph
        <p> {{post.content}} </p>
    {% endfor %}
{% endblock content%} ## easier to keep track with specifying the block content

## Use getbootstrap.com for starter template
# https://getbootstrap.com/docs/4.0/getting-started/introduction/#starter-template
## Simply copy from <head></head> to base.html
## and <body></body>
### margin changes will show up on webpages


<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <title>Hello, world!</title>
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
  </body>
</html>


### Admin Page
## goto local website /admin page
##in command to create user name
python manage.py createsuperuser    ### OperationalError: no such table: auth_user

python manage.py makemigrations
## tells us no changes detected

##inorder to apply the migration
python manage.py migrate

##then we can run the superuser command
python manage.py createsuperuser
##then it allows you to create username, email address, passowrd


## database and migrations

### ORM object relational mapper
## open model.py file
from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User

class Post(models.Model):
    title = models.CharField(max_length = 100)
    content = models.TextField()
    date_posted = models.DateTimeField(default = timezone.now)
    author = models.ForeignKey(User, on_delete = models.CASCADE) ## if user delete the post, then we also delete the post for on_delete

# Then go to command line
python manage.py makemigrations

###shows migrations for 'blog': blog/migrations/0001_initial.py
## open 0001_initial.py
## we can see things we created in Class post


python manage.py sqlmigrate blog 0001
## it shows the SQL code for generating the tables
python manage.py migrate
## we get an ok status here

python manage.py shell
from blog.models import Post
from django.contrib.auth.models import User
User.object.all                        ## it returns all the users we have 
User.object.first()    .last()    
User.objects.filter(username = 'CoreyMS')   ## <QuerySet [<User: CoreyMS>]>
User.objects.filter(username = 'CoreyMS').first()     ## <User: CoreyMS>
user = User.objects.filter(username = 'CoreyMS').first()  
user    ## ## <User: CoreyMS>
user.id  # 1 
user.pk # primary key 1
user = User.objects.get(id=1)
Post.objects.all()   ##<QuerySet []>
post_1 = Post(title = 'blog 1', content = 'First Post COntent!', author = user)
## we need to save post_1 
post_1.save()
Post.objects.all()   ##<QuerySet [<Post: Post object (1)>]>


## Open models.py
def __str__(self):
  return self.title  ### the post.objects.al() will show like this after the def __str__ are setted <QuerySet [<Post: blog 1>]>

python manage.py shell
from blog.models import Post
from django.contrib.auth.models import User
Post.objects.all() 

user.post_set.all() ## to read all the posts of the user
user.post_set.create(title = 'blog 3', content = 'third post content')   ## to create a post for the user we preset

exit()


#open blog views.py
from .models import Post
#in def home(reques):
#change    
'posts': Post.objects.all()

python.manage.py runserver
## you will see the website with data in database rather than dummy data we set in post = [{...}{...}]

Open admin.py
admin.site.register(Post)
## then it show up the blog information  



### User Registration
python manage.py startapp users
## it creates the users folder in the editor
#open settings.py add 'users.apps.UsersConfig', into INSTALLED_APPS


#open views.py in users file
from django.contrib.auth.forms import UserCreationForm


def register(request):
    form = UserCreationForm()
    return render(request, 'users/register.html', {'form': form})
    
# new folder called template in users, intemplate folder create new folder users
#create register.html here directly copy about.html's fomat code here
{% extends 'blog/base.html' %}
{% block content %}
    <div class = 'content-section'>
        <form method = 'POST'>
            {% csrf_token %}
            <fieldset class = 'form-group'>
              <legend class = 'border-bottom mb-4'> Join Today </legend>
              {{ form.as_p }}  ## run the form in paragraph type
            <fieldset>
            <div class= 'form-group'>
              <button class = 'btn btn-outline-info' type = 'submit'> Sign up </button>
            </div>
        </form>
        <div class = 'border-top pt-3'>
            <small class='text-muted'> 
                Already Have An Account ? <a class = 'ml-2' href = '#'> Sign in </a> 
            </small>
        </div>
    </div>
{% endblock content %}

#open django project urls.py
from users import views as user_views
## in urlpatterns
 = [
  path('register/', user_views.register, name = 'register'),
 ]
 
 
#in the views.py
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import UserRegisterForm

###type of message: message.debug, message.info, message.success, message.warning, message.error

def register(request):
    if request.method == 'POST':
      form = UserREhosyerFpr,Form(request.POST)
      if form.is_valid():
          form.save()
          username = form.cleaned_data.get('username')
          messages.success(request, f'Account created for {username}!')
          return redirect('blog-home')
    else:
      form = UserRegistrationForm()
    return render(request, 'users/register.html', {'form': form})


#in the user folder create forms.py
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField() # required = True is default
    
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
        
pip install django-crispy-forms
in the installed_apps
 = [
  'crispy_forms',
 ]
 
 ##go to the bottom of the settings.py
 CRISPY_TEMPLATE_PACK = 'bootstrap4'

#in registration.html
# add the line after {%exrend....%} and we no longer need the form.as_p instead {{form|crispy}}
{% load crispy_forms_tags %}














    




